RBAC(Role Based Access Control):
1. Service Account:
 In k8s environment we have two types of users to authenicate and autorize with Apiserver:
  1. SA(service account)
  2. Human users
Service Accounts: Service accounts are used by pods and other Kubernetes resources to interact with the Kubernetes API server. They are typically associated with specific permissions and roles within the cluster.
Human Users: Human users are individuals who interact with the Kubernetes cluster, typically through command-line tools such as kubectl. Human users may authenticate using various methods, such as certificates, tokens, or other authentication mechanisms supported by the Kubernetes API server.

Authentication and Authorization:
When a pod makes a request to the Kubernetes API server, the API server authenticates the request to ensure that it is coming from a valid source.
Authentication in Kubernetes can be performed using various methods, including certificates, tokens, service account tokens, and more.
Once a request is authenticated, the Kubernetes API server authorizes the request to determine whether the authenticated user (or service account) has permission to perform the requested action.
Authorization in Kubernetes is based on role-based access control (RBAC), which allows administrators to define roles and role bindings to specify what actions different users (or service accounts) are allowed to perform within the cluster.

Service Accounts:
Authentication: Service accounts authenticate with the Kubernetes API server using a token assigned to them. When a pod or other resource makes a request to the Kubernetes API server, it includes a token associated with its service account. The API server validates this token to authenticate the request.
Authorization: After a service account is authenticated, the Kubernetes API server authorizes the request based on the permissions associated with the service account. Permissions are typically defined using role-based access control (RBAC), where roles and role bindings specify what actions the service account is allowed to perform within the cluster.
Human Users:
Authentication: Human users authenticate with the Kubernetes API server using various methods, such as certificates, tokens, or other authentication mechanisms supported by the Kubernetes API server. For example, a user may authenticate using a token generated by the Kubernetes API server or by providing a client certificate.
Authorization: Similar to service accounts, after a human user is authenticated, the Kubernetes API server authorizes the request based on the permissions associated with the user. Permissions for human users are also typically defined using RBAC, where roles and role bindings specify what actions the user is allowed to perform within the cluster.

In this practical, we will cover the following steps:

Creating a Service Account
Creating a token for the Service Account
Creating a Role to define permissions
Creating a RoleBinding to associate the Role with the Service Account
Using the Service Account in a Pod
Verifying access permissions
